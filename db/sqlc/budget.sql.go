// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: budget.sql

package db

import (
	"context"
	"database/sql"
)

const createBudget = `-- name: CreateBudget :one
INSERT INTO budget (
    id,
    user_id,
    amount,
    description,
    created_by
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, user_id, amount, description, created_at, created_by, updated_at, updated_by, deleted_by, deleted_at
`

type CreateBudgetParams struct {
	ID          string `json:"id"`
	UserID      string `json:"user_id"`
	Amount      int32  `json:"amount"`
	Description string `json:"description"`
	CreatedBy   string `json:"created_by"`
}

func (q *Queries) CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error) {
	row := q.queryRow(ctx, q.createBudgetStmt, createBudget,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Description,
		arg.CreatedBy,
	)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBudget = `-- name: DeleteBudget :exec
UPDATE budget
SET
deleted_at = NOW(),
deleted_by = $1
WHERE user_id = $2
`

type DeleteBudgetParams struct {
	DeletedBy sql.NullString `json:"deleted_by"`
	UserID    string         `json:"user_id"`
}

func (q *Queries) DeleteBudget(ctx context.Context, arg DeleteBudgetParams) error {
	_, err := q.exec(ctx, q.deleteBudgetStmt, deleteBudget, arg.DeletedBy, arg.UserID)
	return err
}

const getBudgetByUserID = `-- name: GetBudgetByUserID :one
SELECT id, user_id, amount, description, created_at, created_by, updated_at, updated_by, deleted_by, deleted_at FROM budget
WHERE user_id = $1 AND deleted_at <> null LIMIT 1
`

func (q *Queries) GetBudgetByUserID(ctx context.Context, userID string) (Budget, error) {
	row := q.queryRow(ctx, q.getBudgetByUserIDStmt, getBudgetByUserID, userID)
	var i Budget
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedBy,
		&i.DeletedAt,
	)
	return i, err
}

const getListBudget = `-- name: GetListBudget :many
SELECT id, user_id, amount, description, created_at, created_by, updated_at, updated_by, deleted_by, deleted_at FROM budget
WHERE user_id = $1
LIMIT $1
OFFSET $2
`

type GetListBudgetParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListBudget(ctx context.Context, arg GetListBudgetParams) ([]Budget, error) {
	rows, err := q.query(ctx, q.getListBudgetStmt, getListBudget, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Budget
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedBy,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
